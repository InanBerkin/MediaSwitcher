import * as React from "react";
import { useCallback, useEffect, useMemo, useRef, useState } from "react";
import useInterval from "use-interval";
import useDisplayMedia from "./useDisplayMedia";
import useMediaRecorder from "./useMediaRecorder";
import useUserMedia from "./useUserMedia";
const worker = new Worker("/worker.js");

type ProviderProps = { children: React.ReactNode };
const CanvasStreamContext = React.createContext<
  | {
      startCamera: () => void;
      startDisplay: () => void;
      stream: MediaStream | null;
      stopCamera: () => void;
      stopDisplay: () => void;
    }
  | undefined
>(undefined);

const CAMERA_CONSTRAINTS = {
  video: true,
  audio: true,
};

const DISPLAY_CONSTRAINTS = {
  video: {
    width: { ideal: 1280 },
    height: { ideal: 720 },
  },
  audio: false,
};

const CANVAS_WIDTH = 1280;
const CANVAS_HEIGHT = 720;

function CanvasStreamContextProvider({ children }: ProviderProps) {
  const {
    stream: cameraStream,
    startCamera,
    stopCamera,
  } = useUserMedia(CAMERA_CONSTRAINTS);
  const {
    stream: displayStream,
    startDisplay,
    stopDisplay,
  } = useDisplayMedia(DISPLAY_CONSTRAINTS);

  const [stream, setStream] = useState<MediaStream | null>(null);
  const canvasRef = useRef<HTMLCanvasElement | null>(null);
  const videoRef = useRef<HTMLVideoElement | null>(null);

  const computeFrame = useCallback(() => {
    const ctx = canvasRef?.current?.getContext("2d");
    if (ctx == null || videoRef.current == null) {
      return;
    }

    const leftPos = (CANVAS_WIDTH - videoRef.current.videoWidth) / 2;
    const topPos = (CANVAS_HEIGHT - videoRef.current.videoHeight) / 2;
    ctx.drawImage(videoRef.current, leftPos, topPos);
  }, []);

  // Draw empty frames
  useEffect(() => {
    if (canvasRef.current == null) {
      return;
    }
    if (
      (displayStream == null && cameraStream == null) ||
      (displayStream?.active == false && cameraStream?.active == false)
    ) {
      const canvas = canvasRef.current;
      canvas.width = 1280;
      canvas.height = 720;

      const ctx = canvas.getContext("2d");

      if (ctx == null) {
        return;
      }

      ctx.fillStyle = "#999";
      ctx.fillRect(0, 0, 1280, 720);

      setStream(canvas.captureStream(30));
    }
  }, [cameraStream, displayStream]);

  // Camera
  useEffect(() => {
    if (
      cameraStream == null ||
      cameraStream.active === false ||
      canvasRef.current == null ||
      videoRef.current == null
    ) {
      return;
    }
    // const streamSettings = cameraStream.getVideoTracks()[0].getSettings();
    const videoEl = document.createElement("video");
    videoEl.muted = true;
    videoEl.srcObject = cameraStream;
    videoEl.play();
    videoRef.current = videoEl;

    const offscreen = canvasRef.current.transferControlToOffscreen();
    worker.onmessage = (evt) => {
      console.log(evt.data.timestamp + "ms");
    };

    setStream(canvasRef.current.captureStream(30));

    setInterval(() => {
      computeFrame();
    }, 1000 / 30);
  }, [cameraStream, computeFrame]);

  useEffect(() => {
    if (displayStream == null || displayStream.active === false) {
      return;
    }

    setStream(displayStream);
  }, [displayStream]);

  const value = useMemo(() => {
    return {
      stream,
      startCamera,
      startDisplay,
      stopCamera,
      stopDisplay,
    };
  }, [stream, startCamera, startDisplay]);

  return (
    <CanvasStreamContext.Provider value={value}>
      <canvas
        ref={canvasRef}
        width={1280}
        height={720}
        style={{ display: "none" }}
      ></canvas>
      <video
        ref={videoRef}
        width={1280}
        height={720}
        style={{ display: "none" }}
        muted
        autoPlay
      />
      {children}
    </CanvasStreamContext.Provider>
  );
}

function useCanvasStreamContext() {
  const context = React.useContext(CanvasStreamContext);
  if (context === undefined) {
    throw new Error(
      "useCanvasStreamContext must be used within a CanvasStreamContextProvider"
    );
  }
  return context;
}

export { CanvasStreamContextProvider, useCanvasStreamContext };
